shiny::runApp()
runApp()
runApp()
dt<-USArrests
means<-apply(dt,2,mean)
means
means$Murder
means
means[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
states <- map_data("state")
install.packages('maps')
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
install.packages('ggmap')
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
install.packages('mapdata')
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
dt
dt<-cbind(row.names(dt),dt)
dt
dt<-USArrests
means<-apply(dt[2:5,],2,mean)
dt<-cbind(row.names(dt),dt)
colnames(dt)[1]<-'State'
dt
dt$State<-tolower(dt$State)
states
map.df <- merge(states,dt, by="region", all.x=T)
map.df <- merge(states,dt, by="State", all.x=T)
data("USArrests")
dt<-USArrests
means<-apply(dt[2:5,],2,mean)
dt<-cbind(row.names(dt),dt)
colnames(dt)[1]<-'region'
map.df <- merge(states,dt, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
dt
data.frame(dt)
as.data.frame(dt)
as.data.frame(dt, row.names = NULL)
as.data.frame(dt, row.names = FALSE)
as.data.frame(dt, row.names = NULL)
row.names(dt)<-NULL
d
dt
map.df <- merge(states,v$df, by="region", all.x=T)
map.df <- merge(states,dt, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]
map.df
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Murder))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=dt$Murder))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Count))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
map.df <- merge(states,dt, by="region", all=T)
map.df <- map.df[order(map.df$order),]
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Count))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Murder))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
map.df
map.df$Count<-dt$Murder[which(dt$region==map.df$region)]
states$Count<-dt$Murder[which(dt$region==states$region)]
dt$Murder[which(dt$region==states$region)]
dt$region
dt$region<-tolower(dt$region)
dt$region
dt$Murder[which(dt$region==states$region)]
dt$Murder[which(dt$region==states$region)]
states<-as.data.table(states)
states
states[,Count:=dt$Murder[which(dt$region==region)]]
states[,Count:=dt$Murder[which(dt$region==region)], by=region]
states
states <- as.data.tabloe(map_data("state"))
states <- as.data.table(map_data("state"))
map.df <-states[,Count:=dt$Murder[which(dt$region==region)], by=region]
map.df <- map.df[order(map.df$order),]
map.df
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Count))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
runApp()
runApp()
runApp()
colnames(dt[2,3,5])
colnames(dt[c(2,3,5)])
runApp()
runApp()
columns<-'Murder'
dt[columns,]
dt
dt[columns]
runApp()
dt[columns]
dt[columns][which(dt$region=='Utah')]
[which(dt$region=='Utah')]
which(dt$region=='Utah')
which(dt$region=='U\utah')
which(dt$region=='utah')
dt[which(dt$region=='utah')]
dt[which(dt$region=='utah'),]
dt[columns][which(dt$region=='utah'),]
runApp()
runApp()
dt<-USArrests
dt<-cbind(row.names(dt),dt)
colnames(dt)[1]<-'region'
dt$region<-tolower(dt$region)
states
a<-colnames(dt[c(2,3,5)])
a
st[a[1]]
dt[a[1]]
st[a[1],c(region)]
dt[a[1],c(region)]
dt[a[1]]
dt[c(a[1],region)]
is.data.table()
is.data.table(dt)
dt<-as.data.table(dt)
dt[c(a[1],region)]
dt[,c(a[1],region)]
dt[a[1]]
dt[,a[1]]
dt[,2
]
dt[,c(1,2)]
colnames(dt)
a<-dt[,c(1,2)]
a
merge[states,a, key='region']
merge(states,a, key='region')
states
states <- as.data.table(map_data("state"))
merge(states,a, key='region')
merge(states,dt, key='region')
runApp()
colnames(dt[,c(2,3,5)])
runApp()
map.df <-merge(states,dt,key='region')
map.df <- map.df[order(map.df$order),]
map.df
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Assault)+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
})
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Assault)+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Assault))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
runApp()
b
b<-'Assault'
map.df[,b]
map.df[,,b]
map.df[b]
map.df[,eval(b)]
map.df[eval(b)]
map.df[,eval(b)]
map.df<-as.data,frame(map.df)
map.df<-as.data.frame(map.df)
map.df
map.df[eval(b)]
columns
map.df[,columns]
map.df <-merge(states,dt,key='region')
map.df <- map.df[order(map.df$order),]
map.df[,columns]
map.df[columns]
map.df[columns,]
map.df$eval(columns)
map.df[,columns]
map.df[,,columns]
map.df[,Assault]
map.df[,Count:=Assault]
mapdf
map.df
ggplot(map.df, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=Count))+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90")+
coord_map()
is.data.table(map.df)
columns
eval(columns)
evalq(columns)
args(columns)
df<-as.data.frame(map.df)
df[columns]
df[columns]
map.df[columns]
map.df[,columns]
map.df[,columns, with=FALSE]
map.df[,Count:=columns, with=FALSE]
map.df
map.df[,(Count):=columns, with=FALSE]
map.df[,(Count):=columns]
map.df[,Count:=columns, with=FALSE]
map.df[,Count:=columns]
map.df
map.df[,columns, with=FALSE]
columns
columns<-'Assault'
map.df[,columns, with=FALSE]
map.df$count<-map.df[,columns, with=FALSE]
map.df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states
runApp()
map.df
select(map.df,-count)
range(map.df$long)
range(map.df$long)[1]
runApp()
runApp()
map.df
l<-map.df$long
l
l<-range(map.df$long)
l
round(l)
range(map.df$Murder)
range(map.df$Assault)
range(map.df$Rape)
range(map.df$UrbanPop)
runApp()
map.df
runApp()
runApp()
r<-range(map.df$Murder)
map.df[which(Murder %in% r)]
r[2]
r[2]<-r[2]-10
map.df[which(Murder %in% r)]
map.df[Murder %in% r]
runApp()
runApp()
runApp()
